In shell the default behavior is , it return first 20 document

> db.passengers.insertMany([{
...     "name": "Max Schwarzmueller",
...     "age": 29
...   },
...   {
...     "name": "Manu Lorenz",
...     "age": 30
...   },
...   {
...     "name": "Chris Hayton",
...     "age": 35
...   },
...   {
...     "name": "Sandeep Kumar",
...     "age": 28
...   },
...   {
...     "name": "Maria Jones",
...     "age": 30
...   },
...   {
...     "name": "Alexandra Maier",
...     "age": 27
...   },
...   {
...     "name": "Dr. Phil Evans",
...     "age": 47
...   },
...   {
...     "name": "Sandra Brugge",
...     "age": 33
...   },
...   {
...     "name": "Elisabeth Mayr",
...     "age": 29
...   },
...   {
...     "name": "Frank Cube",
...     "age": 41   
...   },
...   {
...     "name": "Karandeep Alun",
...     "age": 48
...   },
...   {
...     "name": "Michaela Drayer",
...     "age": 39
...   },
...   {
...     "name": "Bernd Hoftstadt",
...     "age": 22
...   },
...   {
...     "name": "Scott Tolib",
...     "age": 44
...   },
...   {
...     "name": "Freddy Melver",
...     "age": 41
...   },
...   {
...     "name": "Alexis Bohed",
...     "age": 35
...   },
...   {
...     "name": "Melanie Palace",
...     "age": 27
...   },
...   {
...     "name": "Armin Glutch",
...     "age": 35
...   },
...   {
...     "name": "Klaus Arber",
...     "age": 53
...   },
...   {
...     "name": "Albert Twostone",
...     "age": 68
...   },
...   {
...     "name": "Gordon Black",
...     "age": 38
...   }])
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("61053879082f665322fd5379"),
                ObjectId("61053879082f665322fd537a"),
                ObjectId("61053879082f665322fd537b"),
                ObjectId("61053879082f665322fd537c"),
                ObjectId("61053879082f665322fd537d"),
                ObjectId("61053879082f665322fd537e"),
                ObjectId("61053879082f665322fd537f"),
                ObjectId("61053879082f665322fd5380"),
                ObjectId("61053879082f665322fd5381"),
                ObjectId("61053879082f665322fd5382"),
                ObjectId("61053879082f665322fd5383"),
                ObjectId("61053879082f665322fd5384"),
                ObjectId("61053879082f665322fd5385"),
                ObjectId("61053879082f665322fd5386"),
                ObjectId("61053879082f665322fd5388"),
                ObjectId("61053879082f665322fd5389"),
                ObjectId("61053879082f665322fd538a"),
                ObjectId("61053879082f665322fd538b"),
                ObjectId("61053879082f665322fd538c"),
                ObjectId("61053879082f665322fd538d")
        ]
}


find method gives you back the curson object , not all data
what is cursor object ? 
It contain lot of meta data that allows us to cycle throught that data
you can "type it for more" means it does not gives us full data

> db.passengers.find().pretty()
{
        "_id" : ObjectId("61053879082f665322fd5379"),
        "name" : "Max Schwarzmueller",
        "age" : 29
}
{
        "_id" : ObjectId("61053879082f665322fd537a"),
        "name" : "Manu Lorenz",
        "age" : 30
}
{
        "_id" : ObjectId("61053879082f665322fd537b"),
        "name" : "Chris Hayton",
        "age" : 35
}
{
        "_id" : ObjectId("61053879082f665322fd537c"),
        "name" : "Sandeep Kumar",
        "age" : 28
}
{
        "_id" : ObjectId("61053879082f665322fd537d"),
        "name" : "Maria Jones",
        "age" : 30
}
{
        "_id" : ObjectId("61053879082f665322fd537e"),
        "name" : "Alexandra Maier",
        "age" : 27
}
{
        "_id" : ObjectId("61053879082f665322fd537f"),
        "name" : "Dr. Phil Evans",
        "age" : 47
}
{
        "_id" : ObjectId("61053879082f665322fd5380"),
        "name" : "Sandra Brugge",
        "age" : 33
}
{
        "_id" : ObjectId("61053879082f665322fd5381"),
        "name" : "Elisabeth Mayr",
        "age" : 29
}
{
        "_id" : ObjectId("61053879082f665322fd5382"),
        "name" : "Frank Cube",
        "age" : 41
}
{
        "_id" : ObjectId("61053879082f665322fd5383"),
        "name" : "Karandeep Alun",
        "age" : 48
}
{
        "_id" : ObjectId("61053879082f665322fd5384"),
        "name" : "Michaela Drayer",
> db.passengers.find().pretty()
{
        "_id" : ObjectId("61053879082f665322fd5379"),
        "name" : "Max Schwarzmueller",
        "age" : 29
}
{
        "_id" : ObjectId("61053879082f665322fd537a"),
        "name" : "Manu Lorenz",
        "age" : 30
}
{
        "_id" : ObjectId("61053879082f665322fd537b"),
        "name" : "Chris Hayton",
        "age" : 35
}
{
        "_id" : ObjectId("61053879082f665322fd537c"),
        "name" : "Sandeep Kumar",
        "age" : 28
}
{
        "_id" : ObjectId("61053879082f665322fd537d"),
        "name" : "Maria Jones",
        "age" : 30
}
{
        "_id" : ObjectId("61053879082f665322fd537e"),
        "name" : "Alexandra Maier",
        "age" : 27
}
{
        "_id" : ObjectId("61053879082f665322fd537f"),
        "name" : "Dr. Phil Evans",
        "age" : 47
}
{
        "_id" : ObjectId("61053879082f665322fd5380"),
        "name" : "Sandra Brugge",
        "age" : 33
}
{
        "_id" : ObjectId("61053879082f665322fd5381"),
        "name" : "Elisabeth Mayr",
        "age" : 29
}
{
        "_id" : ObjectId("61053879082f665322fd5382"),
        "name" : "Frank Cube",
        "age" : 41
}
{
        "_id" : ObjectId("61053879082f665322fd5383"),
        "name" : "Karandeep Alun",
        "age" : 48
}
{
        "_id" : ObjectId("61053879082f665322fd5384"),
        "name" : "Michaela Drayer",
        "age" : 39
}
{
        "_id" : ObjectId("61053879082f665322fd5385"),
        "name" : "Bernd Hoftstadt",
        "age" : 22
}
{
        "_id" : ObjectId("61053879082f665322fd5386"),
        "name" : "Scott Tolib",
        "age" : 44
}
{
        "_id" : ObjectId("61053879082f665322fd5387"),
        "name" : "Freddy Melver",
        "age" : 41
}
{
        "_id" : ObjectId("61053879082f665322fd5388"),
        "name" : "Alexis Bohed",
        "age" : 35
}
{
        "_id" : ObjectId("61053879082f665322fd5389"),
        "name" : "Melanie Palace",
        "age" : 27
}
{
        "_id" : ObjectId("61053879082f665322fd538a"),
        "name" : "Armin Glutch",
        "age" : 35
}
{
        "_id" : ObjectId("61053879082f665322fd538b"),
        "name" : "Klaus Arber",
        "age" : 53
}
{
        "_id" : ObjectId("61053879082f665322fd538c"),
        "name" : "Albert Twostone",
> db.passengers.find().pretty()
{
        "_id" : ObjectId("61053879082f665322fd5379"),
        "name" : "Max Schwarzmueller",
        "age" : 29
}
{
        "_id" : ObjectId("61053879082f665322fd537a"),
        "name" : "Manu Lorenz",
        "age" : 30
}
{
        "_id" : ObjectId("61053879082f665322fd537b"),
        "name" : "Chris Hayton",
        "age" : 35
}
{
        "_id" : ObjectId("61053879082f665322fd537c"),
        "name" : "Sandeep Kumar",
        "age" : 28
}
{
        "_id" : ObjectId("61053879082f665322fd537d"),
        "name" : "Maria Jones",
        "age" : 30
}
{
        "_id" : ObjectId("61053879082f665322fd537e"),
        "name" : "Alexandra Maier",
        "age" : 27
}
{
        "_id" : ObjectId("61053879082f665322fd537f"),
        "name" : "Dr. Phil Evans",
        "age" : 47
}
{
        "_id" : ObjectId("61053879082f665322fd5380"),
        "name" : "Sandra Brugge",
        "age" : 33
}
{
        "_id" : ObjectId("61053879082f665322fd5381"),
        "name" : "Elisabeth Mayr",
        "age" : 29
}
{
        "_id" : ObjectId("61053879082f665322fd5382"),
        "name" : "Frank Cube",
        "age" : 41
}
{
        "_id" : ObjectId("61053879082f665322fd5383"),
        "name" : "Karandeep Alun",
        "age" : 48
}
{
        "_id" : ObjectId("61053879082f665322fd5384"),
        "name" : "Michaela Drayer",
        "age" : 39
}
{
        "_id" : ObjectId("61053879082f665322fd5385"),
        "name" : "Bernd Hoftstadt",
        "age" : 22
}
{
        "_id" : ObjectId("61053879082f665322fd5386"),
        "name" : "Scott Tolib",
        "age" : 44
}
{
        "_id" : ObjectId("61053879082f665322fd5387"),
        "name" : "Freddy Melver",
        "age" : 41
}
{
        "_id" : ObjectId("61053879082f665322fd5388"),
        "name" : "Alexis Bohed",
        "age" : 35
}
{
        "_id" : ObjectId("61053879082f665322fd5389"),
        "name" : "Melanie Palace",
        "age" : 27
}
{
        "_id" : ObjectId("61053879082f665322fd538a"),
        "name" : "Armin Glutch",
        "age" : 35
}
{
        "_id" : ObjectId("61053879082f665322fd538b"),
        "name" : "Klaus Arber",
        "age" : 53
}
{
        "_id" : ObjectId("61053879082f665322fd538c"),
        "name" : "Albert Twostone",
        "age" : 68
}
Type "it" for more


toArray() will go throught the whole cursor (means exhaust the whole cursor and return whole data in array)
Now it is giving up full data 
But this is also not optimal there is another method

> db.passengers.find().toArray()
[
        {
                "_id" : ObjectId("61053879082f665322fd5379"),
                "name" : "Max Schwarzmueller",
                "age" : 29
        },
        {
                "_id" : ObjectId("61053879082f665322fd537a"),
                "name" : "Manu Lorenz",
                "age" : 30
        },
        {
                "_id" : ObjectId("61053879082f665322fd537b"),
                "name" : "Chris Hayton",
                "age" : 35
        },
        {
                "_id" : ObjectId("61053879082f665322fd537c"),
                "name" : "Sandeep Kumar",
                "age" : 28
        },
        {
                "_id" : ObjectId("61053879082f665322fd537d"),
                "name" : "Maria Jones",
                "age" : 30
        },
        {
                "_id" : ObjectId("61053879082f665322fd537e"),
                "name" : "Alexandra Maier",
                "age" : 27
        },
        {
                "_id" : ObjectId("61053879082f665322fd537f"),
                "name" : "Dr. Phil Evans",
                "age" : 47
        },
        {
                "_id" : ObjectId("61053879082f665322fd5380"),
                "name" : "Sandra Brugge",
                "age" : 33
        },
        {
                "_id" : ObjectId("61053879082f665322fd5381"),
                "name" : "Elisabeth Mayr",
                "age" : 29
        },
        {
                "_id" : ObjectId("61053879082f665322fd5382"),
                "name" : "Frank Cube",
                "age" : 41
        },
        {
                "_id" : ObjectId("61053879082f665322fd5383"),
                "name" : "Karandeep Alun",
                "age" : 48
        },
        {
                "_id" : ObjectId("61053879082f665322fd5384"),
                "name" : "Michaela Drayer",
                "age" : 39
        },
        {
                "_id" : ObjectId("61053879082f665322fd5385"),
                "name" : "Bernd Hoftstadt",
                "age" : 22
        },
        {
                "_id" : ObjectId("61053879082f665322fd5386"),
                "name" : "Scott Tolib",
                "age" : 44
        },
        {
                "_id" : ObjectId("61053879082f665322fd5387"),
                "name" : "Freddy Melver",
                "age" : 41
        },
        {
                "_id" : ObjectId("61053879082f665322fd5388"),
                "name" : "Alexis Bohed",
                "age" : 35
        },
        {
                "_id" : ObjectId("61053879082f665322fd5389"),
                "name" : "Melanie Palace",
                "age" : 27
        },
        {
                "_id" : ObjectId("61053879082f665322fd538a"),
                "name" : "Armin Glutch",
                "age" : 35
        },
        {
                "_id" : ObjectId("61053879082f665322fd538b"),
                "name" : "Klaus Arber",
                "age" : 53
        },
        {
                "_id" : ObjectId("61053879082f665322fd538c"),
                "name" : "Albert Twostone",
                "age" : 68
        },
        {
                "_id" : ObjectId("61053879082f665322fd538d"),
                "name" : "Gordon Black",
                "age" : 38
        }
]



forEach() method
forEach() will go throught the whole data
forEach( () => { }) method takes an callback function


db.passengers.find().forEach( (passengerData) => { printjson(passengerData)})
{
        "_id" : ObjectId("61053879082f665322fd5379"),
        "name" : "Max Schwarzmueller",
        "age" : 29
}
{
        "_id" : ObjectId("61053879082f665322fd537a"),
        "name" : "Manu Lorenz",
        "age" : 30
}
{
        "_id" : ObjectId("61053879082f665322fd537b"),
        "name" : "Chris Hayton",
        "age" : 35
}
{
        "_id" : ObjectId("61053879082f665322fd537c"),
        "name" : "Sandeep Kumar",
        "age" : 28
}
{
        "_id" : ObjectId("61053879082f665322fd537d"),
        "name" : "Maria Jones",
        "age" : 30
}
{
        "_id" : ObjectId("61053879082f665322fd537e"),
        "name" : "Alexandra Maier",
        "age" : 27
}
{
        "_id" : ObjectId("61053879082f665322fd537f"),
        "name" : "Dr. Phil Evans",
        "age" : 47
}
{
        "_id" : ObjectId("61053879082f665322fd5380"),
        "name" : "Sandra Brugge",
        "age" : 33
}
{
        "_id" : ObjectId("61053879082f665322fd5381"),
        "name" : "Elisabeth Mayr",
        "age" : 29
}
{
        "_id" : ObjectId("61053879082f665322fd5382"),
        "name" : "Frank Cube",
        "age" : 41
}
{
        "_id" : ObjectId("61053879082f665322fd5383"),
        "name" : "Karandeep Alun",
        "age" : 48
}
{
        "_id" : ObjectId("61053879082f665322fd5384"),
        "name" : "Michaela Drayer",
        "age" : 39
}
{
        "_id" : ObjectId("61053879082f665322fd5385"),
        "name" : "Bernd Hoftstadt",
        "age" : 22
}
{
        "_id" : ObjectId("61053879082f665322fd5386"),
        "name" : "Scott Tolib",
        "age" : 44
}
{
        "_id" : ObjectId("61053879082f665322fd5387"),
        "name" : "Freddy Melver",
        "age" : 41
}
{
        "_id" : ObjectId("61053879082f665322fd5388"),
        "name" : "Alexis Bohed",
        "age" : 35
}
{
        "_id" : ObjectId("61053879082f665322fd5389"),
        "name" : "Melanie Palace",
        "age" : 27
}
{
        "_id" : ObjectId("61053879082f665322fd538a"),
        "name" : "Armin Glutch",
        "age" : 35
}
{
        "_id" : ObjectId("61053879082f665322fd538b"),
        "name" : "Klaus Arber",
        "age" : 53
}
{
        "_id" : ObjectId("61053879082f665322fd538c"),
        "name" : "Albert Twostone",
        "age" : 68
}
{
        "_id" : ObjectId("61053879082f665322fd538d"),
        "name" : "Gordon Black",
        "age" : 38
}